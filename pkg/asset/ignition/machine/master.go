package machine

import (
	"encoding/json"
        "github.com/openshift/installer/pkg/asset/ignition"
	"os"

	igntypes "github.com/coreos/ignition/config/v2_2/types"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/tls"
)

const (
	masterIgnFilename = "master.ign"
)

// Master is an asset that generates the ignition config for master nodes.
type Master struct {
	Config *igntypes.Config
	File   *asset.File
}

var _ asset.WritableAsset = (*Master)(nil)

// Dependencies returns the assets on which the Master asset depends.
func (a *Master) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&tls.RootCA{},
	}
}

// Generate generates the ignition config for the Master asset.
func (a *Master) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	rootCA := &tls.RootCA{}
	dependencies.Get(installConfig, rootCA)

	a.Config = pointerIgnitionConfig(installConfig.Config, rootCA.Cert(), "master")

        a.Config.Storage.Files = append(a.Config.Storage.Files,ignition.FileFromString("/etc/sysconfig/network-scripts/ifcfg-api-conn", "root", 0420, `VLAN=yes
               TYPE=Vlan
               PHYSDEV=ens3
               VLAN_ID=1021
               REORDER_HDR=yes
               GVRP=no
               MVRP=no
               PROXY_METHOD=none
               BROWSER_ONLY=no
               BOOTPROTO=none
               IPADDR=10.11.0.12
               PREFIX=24
               DEFROUTE=yes
               GATEWAY=10.11.0.1
               PEERDNS=no
               IPV4_FAILURE_FATAL=no
               IPV6INIT=no
               NAME=api-conn
               DEVICE=ens3.1021
               ONBOOT=yes
               METRIC=90`),ignition.FileFromString("/etc/sysconfig/network-scripts/ifcfg-ens3.4094", "root", 0420, `DEVICE=ens3.4094
               ONBOOT=yes
               BOOTPROTO=dhcp
               MTU=1500
               TYPE=Vlan
               VLAN=yes
               PHYSDEV=ens3
               VLAN_ID=4094
               REORDER_HDR=yes
               GVRP=no
               MVRP=no
               PROXY_METHOD=none
               BROWSER_ONLY=no
               DEFROUTE=yes
               IPV4_FAILURE_FATAL=no
               IPV6INIT=no`),ignition.FileFromString("/etc/sysconfig/network-scripts/ifcfg-opflex-conn", "root", 0420, `VLAN=yes
               TYPE=Vlan
               PHYSDEV=ens3
               VLAN_ID=4093
               REORDER_HDR=yes
               GVRP=no
               MVRP=no
               PROXY_METHOD=none
               BROWSER_ONLY=no
               BOOTPROTO=dhcp
               DEFROUTE=no
               IPV4_FAILURE_FATAL=no
               IPV6INIT=no
               NAME=opflex-conn
               DEVICE=ens3.4093
               ONBOOT=yes
               MTU=1500`),ignition.FileFromString("/etc/sysconfig/network-scripts/ifcfg-uplink-conn", "root", 0420, `TYPE=Ethernet
               PROXY_METHOD=none
               BROWSER_ONLY=no
               DEFROUTE=yes
               IPV4_FAILURE_FATAL=no
               IPV6INIT=no
               NAME=uplink-conn
               DEVICE=ens3
               ONBOOT=yes
               BOOTPROTO=none
               MTU=1500`),ignition.FileFromString("/etc/sysconfig/network-scripts/route-opflex-conn", "root", 0420, `ADDRESS0=224.0.0.0
               NETMASK0=240.0.0.0
               METRIC0=1000`))
	data, err := json.Marshal(a.Config)
	if err != nil {
		return errors.Wrap(err, "failed to marshal Ignition config")
	}
	a.File = &asset.File{
		Filename: masterIgnFilename,
		Data:     data,
	}

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *Master) Name() string {
	return "Master Ignition Config"
}

// Files returns the files generated by the asset.
func (a *Master) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the master ignitions from disk.
func (a *Master) Load(f asset.FileFetcher) (found bool, err error) {
	file, err := f.FetchByName(masterIgnFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	config := &igntypes.Config{}
	if err := json.Unmarshal(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", masterIgnFilename)
	}

	a.File, a.Config = file, config
	return true, nil
}
