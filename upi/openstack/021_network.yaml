- import_playbook: common.yaml

- hosts: all
  gather_facts: no

  tasks:
  - name: 'list network'
    ansible.builtin.command:
      cmd: "openstack network list --name {{ os_aci_containers_network }} --tag {{ cluster_id_tag }}"
    when: os_networking_type == "CiscoACI"
    register: node_network

  - name: 'get nested domain infra vlan of network'
    ansible.builtin.command:
      cmd: "neutron net-show {{ os_aci_containers_network }} -f value -c apic:nested_domain_infra_vlan"
    when:
      - os_networking_type == "CiscoACI"
      - node_network.stdout != ""
    register: infra_vlan

  - name: 'get nested domain service vlan of network'
    ansible.builtin.command:
      cmd: "neutron net-show {{ os_aci_containers_network }} -f value -c apic:nested_domain_service_vlan"
    when:
      - os_networking_type == "CiscoACI"
      - node_network.stdout != ""
    register: service_vlan

  - name: 'Check if ACI containers node network already exists with different vlan configuration'
    assert:
      that:
        - infra_vlan.stdout|int == aci_cni['infra_vlan']
        - service_vlan.stdout|int == aci_cni['service_vlan']
      fail_msg: "{{ os_aci_containers_network }} already exists with different vlan configuration."
    when:
      - os_networking_type == "CiscoACI"
      - node_network.stdout != ""

  - name: 'Create ACI containers node network'
    ansible.builtin.command:
      cmd: "neutron net-create {{ os_aci_containers_network }} --apic:nested-domain-name openshift-domain --apic:nested-domain-type openshift --apic:nested_domain_infra_vlan {{ aci_cni['infra_vlan'] }} --apic:nested_domain_service_vlan {{ aci_cni['service_vlan'] }}"
    when:
      - os_networking_type == "CiscoACI"
      - node_network.stdout == ""

  - name: 'Set the ACI containers cluster network tag'
    ansible.builtin.command:
      cmd: "openstack network set --tag {{ cluster_id_tag }} {{ os_aci_containers_network }}"
    when:
      - os_networking_type == "CiscoACI"
      - node_network.stdout == ""

  - name: 'list containers subnet'
    ansible.builtin.command:
      cmd: "openstack subnet list --name {{ os_aci_containers_subnet }} --network {{ os_aci_containers_network }}"
    when: os_networking_type == "CiscoACI"
    register: containers_subnet

  - name: 'get cidr of containers subnet'
    ansible.builtin.command:
      cmd: "openstack subnet list --name {{ os_aci_containers_subnet }} --network {{ os_aci_containers_network }} -f value -c Subnet"
    when:
      - os_networking_type == "CiscoACI"
      - containers_subnet.stdout != ""
    register: containers_subnet_cidr

  - name: 'Check if ACI containers subnet already exists with different cidr'
    assert:
      that:
        - aci_cni['network_interfaces']['opflex']['subnet'] in containers_subnet_cidr.stdout_lines|list
      fail_msg: "{{ os_aci_containers_subnet }} already exists with different cidr."
    when:
      - os_networking_type == "CiscoACI"
      - containers_subnet.stdout != ""


  - name: 'Create the ACI containers subnet'
    openstack.cloud.subnet:
      name: "{{ os_aci_containers_subnet }}"
      network_name: "{{ os_aci_containers_network }}"
      no_gateway_ip: yes
      cidr: "{{ aci_cni['network_interfaces']['opflex']['subnet'] }}"
      allocation_pool_start: "{{ aci_cni['network_interfaces']['opflex']['subnet'] | next_nth_usable(10) }}"
      allocation_pool_end: "{{ aci_cni['network_interfaces']['opflex']['subnet'] | ipaddr('last_usable') }}"
    when:
      - os_networking_type == "CiscoACI"
      - containers_subnet.stdout == ""

  - name: 'Set the ACI containers cluster subnet tag'
    ansible.builtin.command:
      cmd: "openstack subnet set --tag {{ cluster_id_tag }} {{ os_aci_containers_subnet }}"
    when:
      - os_networking_type == "CiscoACI"
      - containers_subnet.stdout == ""

  - name: 'Set MTU for the ACI containers network'
    ansible.builtin.command:
      cmd: "openstack network set {{ os_aci_containers_network }} --mtu {{ aci_cni['network_interfaces']['opflex']['mtu'] }}"
    when: os_networking_type == "CiscoACI"

